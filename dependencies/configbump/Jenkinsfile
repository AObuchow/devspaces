#!/usr/bin/env groovy
import groovy.transform.Field

// PARAMETERS for this pipeline:
//   FORCE_BUILD

@Field String SOURCE_BRANCH = "master" // or a tag like "v0.1.4"
def String SOURCE_REPO = "che-incubator/configbump" // source repo from which to find commits
def SYNC_REPO="configbump"


def DWNSTM_REPO = "redhat-developer/codeready-workspaces"
def MIDSTM_BRANCH = "crw-2.5-rhel-8" // target branch in dist-git repo, eg., crw-2.5-rhel-8
def DWNSTM_BRANCH = MIDSTM_BRANCH

// Nodes to run artifact build on ex. ['rhel7-releng', 's390x-rhel7-beaker', 'ppc64le-rhel7-beaker']
// TODO enable Z and P
def List build_nodes = ['rhel7-releng', 's390x-rhel7-beaker', 'ppc64le-rhel7-beaker']
def Map tasks = [failFast: false]

@Field String QUAY_REPO_PATH = ""

def OLD_SHA=""
def NEW_SHA=""
def SOURCE_SHA=""
for (int i=0; i < build_nodes.size(); i++) {
  def String nodeLabel = "${build_nodes[i]}"
  tasks[build_nodes[i]] = { ->

    timeout(120) {
        node(nodeLabel){ 
            stage("Sync repos + build artifacts") {
                wrap([$class: 'TimestamperBuildWrapper']) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/crw-2.5-rhel-8/product/util.groovy')
                    def util = load "${WORKSPACE}/util.groovy"
                    cleanWs()
                    CRW_VERSION = util.getCrwVersion(DWNSTM_BRANCH)
                    println "CRW_VERSION = '" + CRW_VERSION + "'"
                    util.installSkopeo(CRW_VERSION)
                    QUAY_REPO_PATH=util.getCRWShortName(SYNC_REPO) + "-rhel8"

                    withCredentials([string(credentialsId:'devstudio-release.token', variable: 'GITHUB_TOKEN'),
                        file(credentialsId: 'crw-build.keytab', variable: 'CRW_KEYTAB')]) {
                        util.bootstrap(CRW_KEYTAB)
                        println "########################################################################################################"
                        println "##  Clone and update github.com/${SOURCE_REPO}.git"
                        println "########################################################################################################"
                        util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources/${SYNC_REPO}", SOURCE_BRANCH)
                        // util.updateBaseImages("${WORKSPACE}/sources/${SYNC_REPO}", SOURCE_BRANCH)
                        SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources/${SYNC_REPO}")
                        println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA

                        println "########################################################################################################"
                        println "##  Sync ${SYNC_REPO} to pkgs.devel"
                        println "########################################################################################################"
                        util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/containers/codeready-workspaces-${SYNC_REPO}", "${WORKSPACE}/targetdwn/${SYNC_REPO}", DWNSTM_BRANCH)

                        // ignore files that are ONLY in downstream (not midstream or upstream)
                        writeFile file: "rsync-brew-exclude", text: '''
                        sources
                        get-sources-jenkins.sh
                        cvp.yml
                        tests/
                        content_sets.yml
                        content_sets.repo
                        container.yaml
                        .gitignore
                        '''
                        sh('''rsync -avhz --checksum --exclude-from ${WORKSPACE}/rsync-brew-exclude --exclude .git/ --exclude .github/ \
                            ${WORKSPACE}/sources/''' + SYNC_REPO + '''/ ${WORKSPACE}/targetdwn/''' + SYNC_REPO)

                        // copy build/dockerfiles/brew.Dockerfile to Dockerfile
                        sh('''rsync -avhz --checksum ${WORKSPACE}/sources/''' + SYNC_REPO + '''/build/dockerfiles/brew.Dockerfile ${WORKSPACE}/targetdwn/''' + SYNC_REPO + '''/Dockerfile''')

                        // append brew metadata to brew.Dockerfile after copying to downstream
                        sh('''#!/bin/bash -xe
METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + SYNC_REPO + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
    description="$DESCRIPTION" \\\r
    io.k8s.description="$DESCRIPTION" \\\r
    io.k8s.display-name=\"$DESCRIPTION" \\\r
    io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
    com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
    name="$PRODNAME/$COMPNAME" \\\r
    version="''' + CRW_VERSION + '''" \\\r
    license="EPLv2" \\\r
    maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
    io.openshift.expose-services="" \\\r
    usage="" \r'
echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/''' + SYNC_REPO + '''/Dockerfile
                            ''')

                        OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn/${SYNC_REPO}")
                        println "Got OLD_SHA in targetdwn/${SYNC_REPO} folder: " + OLD_SHA

                        // push to dist-git
                        sh('''#!/bin/bash -xe
                        cd ${WORKSPACE}/targetdwn/''' + SYNC_REPO + '''
                        if [[ \$(git diff --name-only) ]]; then # file changed
                            export KRB5CCNAME=/var/tmp/crw-build_ccache
                            git add . -A -f
                            git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA[0..7] + '''"
                            git push origin ''' + DWNSTM_BRANCH + ''' || true
                        fi''')

                        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn/${SYNC_REPO}")
                        println "Got NEW_SHA in targetdwn/${SYNC_REPO} folder: " + NEW_SHA

                        // build project in Jenkins so we can collect asset-* files later via get-sources-jenkins.sh, then trigger a build brew with those files
                        if (NEW_SHA != OLD_SHA || FORCE_BUILD == "true") {
                            sh('''#!/bin/bash -xe
                                cd ${WORKSPACE}/targetdwn/''' + SYNC_REPO + ''' && chmod +x ./build/dockerfiles/*.sh
                                # TODO: remove this sed hack when https://github.com/che-incubator/configbump/pull/13 merged
                                # remove tree since it won't run on P&Z beaker nodes
                                sed -i -r -e 's@tree@#tree@g' ./build/dockerfiles/rhel.Dockerfile.extract.assets.sh
                                ./build/dockerfiles/rhel.Dockerfile.extract.assets.sh
                            ''')
                            archiveArtifacts fingerprint: true, onlyIfSuccessful: true, allowEmptyArchive: false, artifacts: "asset-configbump-*.tar.gz, logs/*"
                        } else {
                            println "No changes upstream, nothing to commit"
                        }

                    } // withCredentials
                } // wrap
            } // stage
        } // node
    } // timeout
  } // tasks
} // for


stage("Builds") {
    parallel(tasks)
}

// kick off get-sources-rhpkg-container-build job
def String nodeLabel = "${build_nodes[0]}"
node(nodeLabel) {
  stage ("Build containers on ${nodeLabel}") {
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/crw-2.5-rhel-8/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILED")) {
      CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      build(
            job: 'get-sources-rhpkg-container-build',
            wait: false,
            propagate: false,
            parameters: [
              [
                $class: 'StringParameterValue',
                name: 'token',
                value: "CI_BUILD"
              ],
              [
                $class: 'StringParameterValue',
                name: 'cause',
                value: "configbump+respin+by+${BUILD_TAG}"
              ],
              [
                $class: 'StringParameterValue',
                name: 'GIT_BRANCH',
                value: "${DWNSTM_BRANCH}"
              ],
              [
                $class: 'StringParameterValue',
                name: 'GIT_PATHs',
                value: "containers/codeready-workspaces-configbump"
              ],
              [
                $class: 'StringParameterValue',
                name: 'QUAY_REPO_PATHs',
                value: "${QUAY_REPO_PATH}"
              ],
              [
                $class: 'StringParameterValue',
                name: 'JOB_BRANCH',
                value: "${CRW_VERSION}"
              ],
              [
                $class: 'StringParameterValue',
                name: 'FORCE_BUILD',
                value: "true"
              ],
              [
                $class: 'StringParameterValue',
                name: 'SCRATCH',
                value: "false"
              ]
            ]
          )
    } // if
  } // stage
} //node
