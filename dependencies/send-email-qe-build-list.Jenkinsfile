#!/usr/bin/env groovy

def SOURCE_BRANCH = "master"

// PARAMETERS for this pipeline:
// getLatestImageTagsFlags="--crw23" # placeholder for flag to pass to getLatestImageTags.sh
// mailSubject  - subject to put on the email, eg., CRW 2.3.0.RC-mm-yy ready for QE
// errataURL - URL for the errata, eg., https://errata.devel.redhat.com/errata/container/56923
// additionalNotes - footer for the email

// function params:
// # recipientOverride - use a different email address for TO and CC (for testing, so you don't spam people)
// # TOrecipients - comma and space separated list of recipient email addresses
// # CCrecipients - comma and space separated list of recipient email addresses
// # mailBodyFile - file to use as email input

import hudson.FilePath;


def sendMail(mailSubject,NEW_QUAY,NEW_NVR,errataURL) { // NEW_OSBS
    // # TODO: use a bot instead?
    def sender="nboldt@redhat.com"
    def recipientOverride = "" // "nboldt@redhat.com" // nullstring if no override
    def TOrecipients = "codeready-workspaces-qa@redhat.com"
    def CCrecipients = "che-prod@redhat.com"
    if (!recipientOverride.equals("")) {
        TOrecipients="${recipientOverride}"
        CCrecipients="${recipientOverride}"
    }

    def NEW_QUAY_L=""; NEW_QUAY.each { line -> if (line?.trim()) { NEW_QUAY_L=NEW_QUAY_L+"- ${line}\n" } } 
    // def NEW_OSBS_L=""; NEW_OSBS.each { line -> if (line?.trim()) { NEW_OSBS_L=NEW_OSBS_L+"= ${line}\n" } }
    def NEW_NVR_L="";  NEW_NVR.each  { line -> if (line?.trim()) { NEW_NVR_L=NEW_NVR_L + "* ${line}\n" } } 


// OSBS Images:
// ''' + NEW_OSBS_L + '''

    writeFile(file: 'mailbody.tmp', text:
mailSubject + '''

Latest crwctl builds:

https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/crwctl_master/lastSuccessfulBuild/artifact/codeready-workspaces-chectl/dist/channels/
 - or -
https://github.com/redhat-developer/codeready-workspaces-chectl/releases

Quay Images:

''' + NEW_QUAY_L + '''
Brew NVRs (for use in ''' + errataURL + '''):

''' + NEW_NVR_L + '''
---------------

''' + additionalNotes + '''


---------------
Generated by https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/send-email-qe-build-list/
''')

    // # use mailx -r or sendmail -f, depending on what's available on the server
    sh '''#!/bin/bash -xe
if [[ -x /bin/mailx ]]; then 
    /bin/mailx -s "''' + mailSubject + '''" -c "''' + CCrecipients + '''" -r "''' + sender + '''" "''' + TOrecipients + '''" < mailbody.tmp
else 
    /bin/mail -s "''' + mailSubject + '''" "''' + TOrecipients + '''" -c"''' + CCrecipients + '''" -- -f"''' + sender + '''" < mailbody.tmp
fi
rm -f mailbody.tmp
'''   
}

def errorOccurred = false
timeout(120) {
    node("rhel7-releng"){ 
        try { 
            stage "Fetch latest image tags and send email"
            cleanWs()
            sh (
                script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/master/product/getLatestImageTags.sh && chmod +x getLatestImageTags.sh',
                returnStdout: true).trim().split()

            def NEW_QUAY = ""
            // def NEW_OSBS = ""
            def NEW_NVR = ""
            parallel quay_check: {
                NEW_QUAY = sh (
                    script: './getLatestImageTags.sh ${getLatestImageTagsFlags} --quay | tee ${WORKSPACE}/LATEST_IMAGES.quay',
                    returnStdout: true).trim().split()
                // check for Quay outage
                if (NEW_QUAY.toString().indexOf("No tags matching")>-1)
                {
                    errorOccurred = true
                    error('Missing tags when reading from quay.io: may be experiencing an outage. Abort!')
                    currentBuild.result = 'ABORTED'
                }
            }, 
            // osbs_check: {
            //     NEW_OSBS = sh (
            //         script: './getLatestImageTags.sh ${getLatestImageTagsFlags} --osbs | tee ${WORKSPACE}/LATEST_IMAGES.osbs',
            //         returnStdout: true).trim().split()
            //         if (NEW_OSBS.toString().indexOf("No tags matching")>-1)
            //         {
            //             errorOccurred = true
            //             error('Missing tags when reading from OSBS: may be experiencing an outage. Abort!')
            //             currentBuild.result = 'ABORTED'
            //         }
            // }, 
            nvr_check: {
                NEW_NVR = sh (
                    script: './getLatestImageTags.sh ${getLatestImageTagsFlags} --nvr | tee ${WORKSPACE}/LATEST_IMAGES.nvr',
                    returnStdout: true).trim().split()
            }
            archiveArtifacts fingerprint: false, artifacts:"LATEST_IMAGES*"
            sendMail(mailSubject,NEW_QUAY,NEW_NVR,errataURL) // NEW_OSBS
        } catch (e) {
            if (errorOccurred) {
                return
            }
            throw e
        }
    }
}